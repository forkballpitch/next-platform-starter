'use client';

import React, { useEffect, useRef, useState } from 'react';
import dynamic from 'next/dynamic';
import styles from '../styles/Home.module.css';

// `react-canvas-draw`Î•º dynamic importÌïòÏó¨ ÏÑúÎ≤Ñ ÏÇ¨Ïù¥Îìú Î†åÎçîÎßÅ Î∞©ÏßÄ
const CanvasDraw = dynamic(() => import('react-canvas-draw'), { ssr: false });

export default function Home() {
    const [targetWord, setTargetWord] = useState('Í∞Ä');
    const [backgroundImage, setBackgroundImage] = useState('');
    const [catPosition, setCatPosition] = useState({ x: 0, y: 0 });
    const [strokeCount, setStrokeCount] = useState(0); // ÌöçÏàò ÏÉÅÌÉú
    const canvasRef = useRef(null);

    const mazeSize = 10; // ÎØ∏Î°ú ÌÅ¨Í∏∞ (10x10)
    const cellSize = 50; // Í∞Å ÏÖÄÏùò ÌÅ¨Í∏∞ (px)

    useEffect(() => {
        // Í∏ÄÏûê Î≥ÄÍ≤Ω Ïãú ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        setStrokeCount(0);
        setCatPosition({ x: 0, y: 0 });
    }, [targetWord]);

    // Í∞ÄÏù¥ÎìúÎùºÏù∏ÏùÑ ÏóÖÎç∞Ïù¥Ìä∏Ìï† ÎïåÎßàÎã§ Ìò∏Ï∂ú
    useEffect(() => {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');

        canvas.width = 500;
        canvas.height = 500;
        ctx.clearRect(0, 0, canvas.width, canvas.height); // Ï∫îÎ≤ÑÏä§ Ï¥àÍ∏∞Ìôî
        ctx.font = '400px Arial';
        ctx.fillStyle = 'rgba(200, 200, 200, 0.5)';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(targetWord, canvas.width / 2, canvas.height / 2);

        setBackgroundImage(canvas.toDataURL());
    }, [targetWord]);

    // ÏÇ¨Ïö©ÏûêÍ∞Ä Í∏ÄÏî®Î•º Í∑∏Î¶¥ ÎïåÎßàÎã§ Ìò∏Ï∂úÎêòÎäî Ìï®Ïàò
    const handleCanvasChange = () => {
        if (!canvasRef.current) return;

        // Î≥ÄÍ≤Ω ÏÇ¨Ìï≠Ïù¥ ÏûàÏùÑ ÎïåÎßàÎã§ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        console.log('Canvas content changed!');
        setStrokeCount((prevCount) => prevCount + 1); // ÌöçÏàò Ï¶ùÍ∞Ä
    };

    // `strokeCount`Í∞Ä Î≥ÄÍ≤ΩÎê† Îïå Í≥†ÏñëÏù¥ ÏúÑÏπòÎ•º ÏóÖÎç∞Ïù¥Ìä∏
    useEffect(() => {
        console.log(`Current Stroke Count: ${strokeCount}`);
        if (strokeCount > 0 && strokeCount % 2 === 0) {
            moveCat();
        }
    }, [strokeCount]);

    // Í≥†ÏñëÏù¥ Ïù¥Îèô Ìï®Ïàò
    const moveCat = () => {
        setCatPosition((prevPosition) => {
            const { x, y } = prevPosition;
            if (x < mazeSize - 1) {
                return { x: x + 1, y }; // Ïò§Î•∏Ï™ΩÏúºÎ°ú Ìïú Ïπ∏ Ïù¥Îèô
            } else if (y < mazeSize - 1) {
                return { x: 0, y: y + 1 }; // ÏïÑÎûòÎ°ú Ìïú Ïπ∏ Ïù¥Îèô
            } else {
                return prevPosition; // Îçî Ïù¥ÏÉÅ Ïù¥ÎèôÌï† Í≥≥Ïù¥ ÏóÜÏúºÎ©¥ Î©àÏ∂§
            }
        });
        console.log(`New Cat Position: x=${catPosition.x}, y=${catPosition.y}`);
    };

    return (
        <div className={styles.container}>
            <h1>ÌïúÍ∏Ä Îî∞Îùº Ïì∞Í∏∞ Í≤åÏûÑ</h1>

            <div className={styles.selectContainer}>
                <label htmlFor="letter-select">Îî∞Îùº Ïì∏ Í∏ÄÏûê ÏÑ†ÌÉù: </label>
                <select id="letter-select" value={targetWord} onChange={(e) => setTargetWord(e.target.value)}>
                    <option value="Í∞Ä">Í∞Ä</option>
                    <option value="ÎÇò">ÎÇò</option>
                    <option value="Îã§">Îã§</option>
                    <option value="Îùº">Îùº</option>
                    <option value="Îßà">Îßà</option>
                    <option value="Î∞î">Î∞î</option>
                    <option value="ÏÇ¨">ÏÇ¨</option>
                </select>
            </div>

            <h2>Îî∞Îùº Ïì∏ Í∏ÄÏûê: {targetWord}</h2>
            <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
                <div style={{ border: '2px solid #333' }}>
                    <CanvasDraw
                        ref={canvasRef}
                        canvasWidth={500}
                        canvasHeight={500}
                        brushColor={'#000'}
                        brushRadius={4}
                        lazyRadius={0}
                        imgSrc={backgroundImage}
                        onChange={handleCanvasChange} // ÏÇ¨Ïö©ÏûêÍ∞Ä Í∑∏Î¶¥ ÎïåÎßàÎã§ Ìò∏Ï∂ú
                    />
                </div>

                <div className={styles.maze}
                     style={{ position: 'relative', width: mazeSize * cellSize, height: mazeSize * cellSize }}>
                    {/* ÎØ∏Î°úÏùò Í∞Å ÏÖÄ */}
                    {Array.from({ length: mazeSize }).map((_, rowIndex) =>
                        Array.from({ length: mazeSize }).map((_, colIndex) => (
                            <div
                                key={`${rowIndex}-${colIndex}`}
                                className={styles.cell}
                                style={{
                                    width: cellSize,
                                    height: cellSize,
                                    border: '1px solid #ddd',
                                    boxSizing: 'border-box',
                                    backgroundColor: rowIndex === catPosition.y && colIndex === catPosition.x ? '#FFDDC1' : 'white'
                                }}
                            >
                                {rowIndex === catPosition.y && colIndex === catPosition.x && (
                                    <span role="img" aria-label="cat" style={{ fontSize: '24px' }}>
                                        üê±
                                    </span>
                                )}
                            </div>
                        ))
                    )}
                </div>
            </div>
            <button onClick={() => canvasRef.current.clear()} className={styles.button}>
                Îã§Ïãú Í∑∏Î¶¨Í∏∞
            </button>
        </div>
    );
}
